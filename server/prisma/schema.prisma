// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  name     String?
  password String
  role     String    @default("admin")
  created  DateTime?
  updated  DateTime?
}

model User {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  email     String         @unique
  name      String?
  password  String
  role      String         @default("user")
  created   DateTime?
  updated   DateTime?
  cart      CartItem[]
  favorites FavoriteItem[]
  Purchase  Purchase[]
}

model Item {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique
  images         String[]
  SizesAndPrices SizesAndPrices[]
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     String           @db.ObjectId
  created        DateTime?
  updated        DateTime?
}

model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  image   String?
  Item    Item[]
  created DateTime?
  updated DateTime?
}

model SizesAndPrices {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  size    String?
  price   Float
  color   String?
  stock   Int
  item    Item      @relation(fields: [itemId], references: [id])
  itemId  String    @db.ObjectId
  created DateTime?
  updated DateTime?
}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  item       String
  images     String[]
  size       String
  price      Float
  color      String
  quantity   Int      @default(0)
  totalPrice Float    @default(0.0)
  owner      User     @relation(fields: [userId], references: [id])
  created    DateTime?
  userId     String   @db.ObjectId
}

model FavoriteItem {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  item    String   @unique
  images  String[]
  size    String
  price   Float
  color   String
  owner   User     @relation(fields: [userId], references: [id])
  created DateTime?
  userId  String   @db.ObjectId
}

model Purchase {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  items         PurchaseItem[] // List of purchased items (relation to a separate PurchaseItem model)
  totalQuantity Int // Total number of items in the purchase
  totalPrice    Float // Total cost of the purchase
  paymentMethod String? // Optional: Payment method used (e.g., card, PayPal, etc.)
  status        String         @default("pending") // Status of the order (e.g., pending, completed, canceled)
  created       DateTime       @default(now()) // Timestamp when the purchase was made
  updated       DateTime? // Optional: Timestamp for when the purchase status was updated
}

model PurchaseItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String   @db.ObjectId
  itemName   String // Name of the purchased item
  size       String // Size of the item (optional)
  color      String // Color of the item (optional)
  price      Float // Price of the item at the time of purchase
  quantity   Int // Quantity purchased
  totalCost  Float // Total cost for this item (price * quantity)
}
